name: Release Add-on

on:
  push:
    branches:
      - main
      # - ci/**
  workflow_dispatch:
    inputs:
      force_upload:
        description: Force build and upload of extension to Releases page
        default: false
        type: boolean

permissions:
  contents: read

env:
  BL_VERSION: 4.5.2
  EXTENSION_NAME: paws_bakery

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false
    permissions:
      contents: write
    outputs:
      released: ${{ steps.release.outputs.released }}
      tag: ${{ steps.release.outputs.tag }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - name: Generate a token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.RELEASE_APP_ID }}
          private-key: ${{ secrets.RELEASE_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v5
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: false
          fetch-depth: 0
          lfs: true

      - name: Force release branch to be at workflow sha
        run: git reset --hard ${{ github.sha }}

      - name: Verify upstream has NOT changed
        run: bash .github/workflows/verify_upstream_not_changed.sh

      - name: Get GitHub App User ID
        id: app-user-id
        run: |
          slug="${{ steps.app-token.outputs.app-slug }}"
          echo "id=$(gh api "/users/${slug}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Generate git author
        id: git-author
        run: |
          slug="${{ steps.app-token.outputs.app-slug }}"
          id="${{ steps.app-user-id.outputs.id }}"
          echo "name=${slug}[bot]" >> "$GITHUB_OUTPUT"
          echo "email=${id}+${slug}[bot]@users.noreply.github.com" >> "$GITHUB_OUTPUT"

      - name: Semantic Version Release
        id: release
        uses: python-semantic-release/python-semantic-release@v10.3.1
        with:
          github_token: ${{ steps.app-token.outputs.token }}
          git_committer_name: ${{ steps.committer.outputs.name }}
          git_committer_email: ${{ steps.committer.outputs.email }}

      - name: Ensure the version metadata is set
        run: |
          test -n "${{ steps.release.outputs.released }}"
          test -n "${{ steps.release.outputs.tag }}"
          test -n "${{ steps.release.outputs.version }}"

  publish:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.released == 'true' || inputs.force_upload }}
    permissions:
      contents: write
    steps:
      - name: Ensure the release metadata is set
        run: |
          test -n "${{ needs.release.outputs.released }}"
          test -n "${{ needs.release.outputs.tag }}"
          test -n "${{ needs.release.outputs.version }}"

      - uses: actions/checkout@v5
        with:
          # token: ${{ secrets.GITHUB_TOKEN }}
          # FIXME: tag may not work because tag may be older than workflow actions
          ref: ${{ needs.release.outputs.tag }}
          fetch-depth: 0
          lfs: true

      - name: Create tmp branch to avoid detached error in PSR
        run: |
          git switch -c release/${{ needs.release.outputs.tag }}

      - name: Build Extension
        id: build
        uses: ./.github/actions/blender-extension-build
        with:
          blender_version: ${{ env.BL_VERSION }}
          extension_name: ${{ env.EXTENSION_NAME }}

      - name: Upload to GitHub Release Assets
        uses: python-semantic-release/publish-action@v10.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.release.outputs.tag }}
          verbosity: 2
#
#   deploy:
#     runs-on: ubuntu-latest
#     needs: release
#     if: ${{ needs.release.outputs.released == 'true' }}
#
#     permissions:
#       contents: read
#       id-token: write
#
#     steps:
#       - name: Setup | Download Build Artifacts
#         uses: actions/download-artifact@v4
#         id: artifact-download
#         with:
#           name: distribution-artifacts
#           path: dist
#
#       # ------------------------------------------------------------------- #
#       # Python Semantic Release is not responsible for publishing your      #
#       # python artifacts to PyPI. Use the official PyPA publish action      #
#       # instead. The following steps are an example but is not guaranteed   #
#       # to work as the action is not maintained by the                      #
#       # python-semantic-release team.                                       #
#       # ------------------------------------------------------------------- #
#
#       # see https://docs.pypi.org/trusted-publishers/
#       - name: Publish package distributions to PyPI
#         uses: pypa/gh-action-pypi-publish@@SHA1_HASH # vX.X.X
#         with:
#           packages-dir: dist
#           print-hash: true
#           verbose: true
