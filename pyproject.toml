[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "paws-bakery"
dynamic = ["version"]
readme = "README.md"
license = "gpl-3.0-or-later"
dependencies = []
requires-python = ">=3.11,<3.12"

[project.optional-dependencies]
dev = [
  "bpy ~= 4.5.2",
  # "fake-bpy-module-latest == 20250505", # uses python 3.12 syntax =(
  "fake-bpy-module-4.1 == 20240604",
  "flake8 >= 6.1.0",
  "flake8-bugbear >= 23.9.16",
  "flake8-comprehensions >= 3.16.0",
  "flake8-docstrings >= 1.7.0",
  "flake8-print >= 5.0.0",
  "flake8-unused-arguments >= 0.0.13",
  "mypy >= 1.17.1",
  "pylint[spelling] >= 3.3.8",
  "pytest >= 6.1.2",
  "pytest-cov >= 2.10.1",
  "pytest-mock >= 3.3.1",
  "ruff >= 0.12.10",
  "syrupy >= 4.9.1",
  "python-dotenv >= 1.1.1",
  "invoke >= 2.2.0",
]

[tool.setuptools.package-data]
"pkgname" = ["py.typed"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.hatch.version]
path = "src/paws_bakery/blender_manifest.toml"

[tool.hatch.build.targets.sdist]
include = ["/src"]


[tool.ruff]
fix = true
target-version = "py311"

# exclude = []
# include = [".vscode/*.py"]

[tool.ruff.lint]
extend-select = ["E", "F", "B", "W", "C", "Q", "D", "E4", "E7", "E9", "ICN"]
# extend-fixable = ["W505", "E501"]
unfixable = ["F401"]
external = ["B036"]

[tool.ruff.lint.per-file-ignores]
# "__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["D1"]
"./tasks.py" = ["D1"]

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

# [tool.ruff.lint.flake8-import-conventions]
# banned-from = ["paws_bakery"]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"bpy.types" = "blt"
"bpy.props" = "blp"

[tool.ruff.lint.pycodestyle]
max-doc-length = 88

[tool.ruff.lint.pydocstyle]
convention = "pep257"
# ignore-var-parameters = true

[tool.ruff.format]
# preview = true
docstring-code-format = true
# docstring-code-line-length = 88
line-ending = "lf"


[tool.mypy]
check_untyped_defs = true
no_implicit_optional = true
strict = true
pretty = true

disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_return_any = true

warn_unused_ignores = true

[[tool.mypy.overrides]]
module = ['tests.*']
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false


[tool.pylint.main]
max-line-length = 88

ignore-paths = ["^tests/.*$"]
generated-member = ["bpy.ops.pawsbkr", "mathutils.Vector"]
disable = [
  "assignment-from-no-return",
  "consider-using-assignment-expr",
  "duplicate-code",
  "fixme",
  "missing-function-docstring",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-locals",
  "too-many-positional-arguments",
]
load-plugins = [
  "pylint.extensions.broad_try_clause",
  "pylint.extensions.comparison_placement",
  "pylint.extensions.confusing_elif",
  "pylint.extensions.for_any_all",
  "pylint.extensions.consider_refactoring_into_while_condition",
  "pylint.extensions.bad_builtin",
  # "pylint.extensions.mccabe",
  "pylint.extensions.dict_init_mutate",
  "pylint.extensions.docstyle",
  "pylint.extensions.dunder",
  "pylint.extensions.check_elif",
  "pylint.extensions.eq_without_hash",
  "pylint.extensions.private_import",
  # "pylint.extensions.magic_value",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.overlapping_exceptions",
  "pylint.extensions.redefined_loop_name",
  "pylint.extensions.set_membership",
  "pylint.extensions.typing",
  "pylint.extensions.while_used",
  "pylint.extensions.code_style",
]

[tool.pylint.dunder]
good-dunder-names = ["_generate_next_value_"]

[tool.semantic_release]
allow_zero_version = true
commit_message = "chore(release): v{version}\n\nAutomatically generated by python-semantic-release"
version_toml = [
  # "pyproject.toml:project.version",
  "src/paws_bakery/blender_manifest.toml:version",
]

[tool.semantic_release.branches.main]
match = "^(main)$"

[tool.semantic_release.branches.release]
match = "^(release)/.+"

[tool.semantic_release.branches.alpha]
match = "^(feat|fix|perf)/.+"
prerelease = true
# prerelease_token = "rc"

[tool.semantic_release.branches.ci]
match = "^(ci)/.+"
prerelease = true
prerelease_token = "ci-test"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  'chore(?:\([^)]*?\))?: .+',
  'ci(?:\([^)]*?\))?: .+',
  'refactor(?:\([^)]*?\))?: .+',
  'style(?:\([^)]*?\))?: .+',
  'test(?:\([^)]*?\))?: .+',
  'build\((?!deps\): .+)',
  'Initial [Cc]ommit.*',
]

# [tool.semantic_release.changelog.default_templates]
# changelog_file = "CHANGELOG.md"
# output_format = "md"
# mask_initial_release = true

# [tool.semantic_release.remote]
# name = "origin"
# type = "github"
# ignore_token_for_push = false
# insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["paws_bakery-*.zip"]
# upload_to_vcs_release = true
